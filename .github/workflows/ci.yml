name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, staging, trying ]
  pull_request:
    branches: [ main ]

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  check:
    name: Rust Check - ${{ matrix.check }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [test, check, fmt, clippy]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - name: Cargo test
        if: ${{ matrix.check == 'test' }}
        run: |
          cargo test

      - name: Cargo check
        if: ${{ matrix.check == 'check' }}
        run: |
          cargo check --all-targets

      - name: Cargo fmt
        if: ${{ matrix.check == 'fmt' }}
        run: cargo fmt -- --check

      - name: Cargo clippy
        if: ${{ matrix.check == 'clippy' }}
        run: cargo clippy -- -D warnings



  build_connector_bins:
    name:  Build binary ${{ matrix.connector-name }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        connector-name:
          - hello
          - mqtt
          - http
        rust: [stable]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
    steps:
      - uses: actions/checkout@v2
      - name: Set RELEASE mode
        #if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV
      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.rust-target }}
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.connector-name }}
      - name: Build
        env:
          CONNECTOR_NAME: ${{ matrix.connector-name }}
        run: make build

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.connector-name }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.connector-name }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.connector-name }}

  build_containers:
    name: Build image ${{ matrix.connector-name }} for ${{ matrix.rust-target }}
    needs: build_connector_bins
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        connector-name: [hello]
        include:
          - os: ubuntu-latest
            connector-name: mqtt
            rust-target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            connector-name: mqtt
            rust-target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            connector-name: http
            rust-target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            connector-name: http
            rust-target: aarch64-unknown-linux-musl
    env:
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2

      # Building w/ QEMU for the arm64 support
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      #- name: Available platforms
      #  run: echo ${{ steps.qemu.outputs.platforms }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # Download artifacts from build
      - name: Download artifact - ${{ matrix.connector-name }} - ${{ matrix.rust-target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.connector-name }}-${{ matrix.rust-target }}
          # This is the directory the Makefile expects artifacts to live in
          path: container-build

      - name: Print container-build dir
        run: |
          ls container-build;
          chmod +x ./container-build/${{ matrix.connector-name }}
          ./container-build/${{ matrix.connector-name }} -h || true

      # The build script will export the resulting image to
      # /tmp/infinyon-fluvio-connector-${{ matrix.connector-name }}-${{ matrix.rust-target }}.tar
      - name: Build containers
        env:
          TARGET: ${{ matrix.rust-target }}
          CONNECTOR_NAME: ${{ matrix.connector-name }}
          COMMIT_HASH: ${{ github.sha }}
          # IMAGE_NAME: ${{ matrix.image-name }}
        run: make official-containers

      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infinyon-fluvio-connector-${{ matrix.connector-name }}-${{ matrix.rust-target }}.tar
          path: /tmp/infinyon-fluvio-connector-${{ matrix.connector-name }}-${{ matrix.rust-target }}.tar

  integration_tests:
    name: Integration testing on - ${{ matrix.os }} for ${{ matrix.connector-name }} connector.
    runs-on: ${{ matrix.os }}
    needs: [build_containers]
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        connector-name: [hello, mqtt, http]
    env:
      RUST_BACKTRACE: full
    steps:
      - uses: AbsaOSS/k3d-action@v1.6.0
        name: "Create fluvio k3d Cluster"
        with:
          cluster-name: "fluvio"
      - name: Sleep 20 to ensure k3d cluster is ready
        run: sleep 20
      - name: Download ${{ matrix.connector-name }} x86_64-unknown-linux-musl Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-connector-${{ matrix.connector-name }}-x86_64-unknown-linux-musl.tar
          path: /tmp
      - name: Load ${{ matrix.connector-name }} into k3d runtime
        run: |
          ls -la /tmp
          k3d image import -k -c fluvio /tmp/infinyon-fluvio-connector-${{ matrix.connector-name }}-x86_64-unknown-linux-musl.tar
      - name: Install Fluvio Local Cluster
        uses: infinyon/fluvio@master
        with:
          cluster-type: k3d
          version: latest
      - name: Check Fluvio Installation
        run: |
          # TODO: When we're not using fluvio on the master branch, revert this.
          fluvio cluster delete
          fluvio cluster start --image-version latest
          sleep 10
          fluvio version
          fluvio topic list
          fluvio topic create foobar
          sleep 3
          echo foo | fluvio produce foobar
          fluvio consume foobar -o 0 -d

      - uses: actions/checkout@v2
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: wasm32-unknown-unknown
      - name: Add wasm

        run: rustup target add wasm32-unknown-unknown
      - name: Setup BATS
        uses: mig4/setup-bats@v1
      - name: Test
        run: make test
        env:
          CONNECTOR_NAME: ${{ matrix.connector-name }}

  docker_push:
    name: Publish ${{ matrix.connector-name }} images to Docker Hub
    needs: [build_containers, integration_tests]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        connector-name: [hello]
        image-name: [infinyon/fluvio-connect-hello]
        include:
          - os: ubuntu-latest
            connector-name: mqtt
            image-name: infinyon/fluvio-connect-mqtt
          - os: ubuntu-latest
            connector-name: http
            image-name: infinyon/fluvio-connect-http
    steps:
      - name: Download ${{ matrix.connector-name }} x86_64-unknown-linux-musl Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-connector-${{ matrix.connector-name }}-x86_64-unknown-linux-musl.tar
          path: /tmp
      - name: Download ${{ matrix.connector-name }} aarch64-unknown-linux-musl Docker Image as Artifact
        uses: actions/download-artifact@v2
        with:
          name: infinyon-fluvio-connector-${{ matrix.connector-name }}-aarch64-unknown-linux-musl.tar
          path: /tmp

      - name: Load Fluvio Docker Image
        run: |
          ls -la /tmp
          docker image load --input /tmp/infinyon-fluvio-connector-${{ matrix.connector-name }}-x86_64-unknown-linux-musl.tar
          docker image load --input /tmp/infinyon-fluvio-connector-${{ matrix.connector-name }}-aarch64-unknown-linux-musl.tar
          docker image ls -a

      - name: Tag Fluvio Connector Docker images
        run: |
          export TAG="latest"
          docker tag "${{ matrix.image-name }}:${{ github.sha }}-x86_64-unknown-linux-musl" "docker.io/${{ matrix.image-name }}:${TAG}-amd64"
          docker tag "${{ matrix.image-name }}:${{ github.sha }}-aarch64-unknown-linux-musl" "docker.io/${{ matrix.image-name }}:${TAG}-arm64v8"
          docker image ls

      - name: Push Fluvio Connector Docker images
        #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        if: github.ref == 'refs/heads/main'
        run: |
          export TAG="latest"
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
          docker push "docker.io/${{ matrix.image-name }}:${TAG}-amd64"
          docker push "docker.io/${{ matrix.image-name }}:${TAG}-arm64v8"
          docker manifest create "docker.io/${{ matrix.image-name }}:${TAG}" \
            "docker.io/${{ matrix.image-name }}:${TAG}-amd64" \
            "docker.io/${{ matrix.image-name }}:${TAG}-arm64v8"
          docker manifest push "docker.io/${{ matrix.image-name }}:${TAG}"

  ## Job that follows the success of all required jobs in this workflow.
  ## Used by Bors to detect that all required jobs have completed successfully
  #done:
  #  name: Done
  #  #if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
  #  needs:
  #    - check
  #    - docker_push
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Done
  #      run: echo "Done!"
