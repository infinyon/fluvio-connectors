name: RELEASE

on:
  workflow_dispatch:
    inputs:
      connector_name:
        required: true
        description: 'The fluvio connector to be released'
        type: choice
        options:
          - test-connector
          - mqtt-source
          - http-source
          - postgres-source
          - postgres-sink
          - slack-sink
          - dynamodb-sink
          - kafka-source
          - kafka-sink
          - sql-sink

env:
  CONNECTOR_NAME: ${{ github.event.inputs.connector_name }}
  IMAGE_NAME: infinyon/fluvio-connect-${{ github.event.inputs.connector_name }}

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  docker_push:
    name: Publish ${{ github.event.inputs.connector_name }} images to Docker Hub
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Try pulling ${{ github.event.inputs.connector_name }} x86_64-unknown-linux-musl docker images
        continue-on-error: true
        id: docker_check
        run: |
          export CONNECTOR_VERSION=$(cargo metadata --format-version 1 | jq '.workspace_members[]' | sed 's/"//g' | awk '{if($1 == "${{env.CONNECTOR_NAME}}") print $2}')
          docker pull ${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}
      - name: Login to Docker Hub
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push release image
        if: ${{ steps.docker_check.outcome == 'failure' }}
        run: |
          export CONNECTOR_VERSION=$(cargo metadata --format-version 1 | jq '.workspace_members[]' | sed 's/"//g' | awk '{if($1 == "${{env.CONNECTOR_NAME}}") print $2}')
          export TAG="${CONNECTOR_VERSION}-${{github.sha}}"
          docker pull "${{ env.IMAGE_NAME }}:latest-amd64"
          docker pull "${{ env.IMAGE_NAME }}:latest-arm64v8"
          docker tag  "${{ env.IMAGE_NAME }}:latest-amd64"   "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-amd64"
          docker tag  "${{ env.IMAGE_NAME }}:latest-arm64v8" "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-arm64v8"

          docker push "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-amd64"
          docker push "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-arm64v8"
          docker manifest create "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}" \
            "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-amd64" \
            "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}-arm64v8"
          docker manifest push "docker.io/${{ env.IMAGE_NAME }}:${CONNECTOR_VERSION}"

      - name: Publishing ${{ github.event.inputs.connector_name }} failed
        if: ${{ failure() }}
        run: docker image ls -a
